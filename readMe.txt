Abdirahman Ali
aha2146
Programming Project 4

For the card class, I built it with the parameters that it takes being face and suit, according to the assignment, but I represented these with integers. This was so I could fill the deck arraylist in the Deck class using only two for loops - one for the suit and one within the aforementioned loop for the face. This seemed like the simplest solution for me. I made the default point value for an ace 11 because having the value be 11 is always beneficial unless the point value exceeds 21; in this case, 10 is subtracted from the total number of points and this is repeated for the number of aces there are in the hand. This is done in the Game class. There are methods that return the number of aces in the hand for both the dealer and player classes. In the deck class, I chose to use an arraylist because of the add() method which would allow me to use loops to fill the deck with ease. In the player class, since the player is allowed to hit multiple times, I made the turn() method prompt the player whether they wanted to hit or not repeatedly until they said no or their points exceeded 21, in which case they would bust. Similarly, in the dealer class, the turn() method automatically hits again until the dealer’s points exceed 16, in which case the dealer stands. In the Game class, I only included one method, play(), because there didn’t seem to be any need for others. I set the method up so that it instantiated the Deck, Player and Dealer classes and asked for the buy-in amount before entering the while loop that allows the player to play another hand. This is because the buy-in amount and classes are supposed to remain as-is when we play another hand. The while loop terminates when replay == false, which occurs if the player runs out of money or quits. The game starts by dealing the cards. We then enter a while loop that determines who wins/pushes and how (i.e. through a blackjack, bust, or because one had more points than the other). We first check for a blackjack. If both the player and dealer have blackjacks, the hand ends in a push. If there is no blackjacks, we then check for a bust. This is where we change the values of the aces (actually subtract 10 repeatedly depending on the amount of aces in the hand). If both the player and dealer bust, the player loses because it’s the player who always moves first. If there are no busts, we then compare the points. The points values that are being compared are the modified ones from the bust check, so if there are aces that would have put the points value over 21 if they were worth 11 points, they’ve been valued at 1 such that if there are multiple aces the highest value that is below one is the final points value used in the comparison. After this while loop is terminated through one of the checks we look to see what kind of win/loss/push took place and adjust the player’s balance accordingly. If it was a blackjack win, the player receives 1.5x their bet, but if it was a regular win they just receive their regular bet amount. Any loss results in the player losing their bet amount. A push results in no change. Then we check if the player has enough money to play another round; if not, we tell them they’re out of money and terminate the replay while loop. If not, we ask if they’d like to play again. If they would, we reset the booleans used in the loops of the game class to false and empty the player and dealer’s hands. If the deck size is below 12, we also “reset” the deck by clearing then refilling and reshuffling it.

The only options I included in turn() for both player and dealer were hit and stand. I didn’t choose to use doubling down, splitting, surrendering possibilities or insurance.